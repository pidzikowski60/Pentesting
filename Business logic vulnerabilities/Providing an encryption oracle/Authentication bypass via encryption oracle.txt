This lab contains a logic flaw that exposes an encryption oracle to users. To solve the lab, exploit this flaw to gain access to the admin panel and delete Carlos.

You can log in to your own account using the following credentials: wiener:peter

1. Wejdź na stronę z zadaniem i uruchom burpa, klikamy w my account, wpisujemy dane podane w zadaniu i klikamy stay logged in, po czym logujemy się klikamy w home i wybieramy jakiegoś posta, zostawiamy jakiś komentarz i uzupełniamy dane np komentarz 1, nazwa hacker, email hacker@gmail.com i klikamy post comment 
2. Próbujemy ponownie zrobić to samo, tylko z błędnym adresem email, dostajemy wiadomość, invalid email adress, przechodzimy do http history w burpie i szukamy POST URL:/post/comment klikamy w to i widzimy, że w responsie mamy set cookie notification, wysyłamy połączzenie do repetera oraz GET URL:/pst?postid= w zadaniu jest to 9
3. W pierwszym repeterze kopiujemy kod od stay logged in, wchodzimy do drugiego requesta czyli /post?post id i podmieniamy tam nasz skopiowany kod z kodem od cookie notification i klikamy send 
4. Otrzymujemy w responsie wiener:1621276899432, kopiujemy liczby i wracamy do pierwszego requesta, nazwijmy go encrypt a drugi niech będzie decrypt, w encrypcie, zmieniamy email=administrator:1621276899432 i klikamy send w response kopiujemy kod z notification 
5. Wchodzimy do decryta i zmieniamy kod z notification na ten co właśnie skopiowaliśmy i klikamy send, w responsie szukamy invalid email user z naszym administrator, musimy pozbyć się tego błędum który zawiera 23 bytes
6. Wchodzimy więc do encrypta w responsie zaznaczamy kod do notyfikacji, klikamy ppm i wysyłamy go do decodera, klikamy decode as url następnie decode as base64, w wersji podstawowej musimy ręcznie usunąć 23 bytes klikając na pierwszy lewy bytes i po prostu usuń, robimy tak do momentu usunięcia 23 bytes
7. Po usunięciu ręcznie 23 bytes klikamy encoded as base64 i encoded as url, kopiujemy url, wracamy do repetera do decrypta i zmieniamy kod z notification na ten co właśnie skopiowaliśmy, klikamy send i w response otrzymaliśmy 500 błąd, ponieważ dekrypt musi być w 16 znakach bądź 32 
8. Wchdzimy do encrypta i zmieniamy email na xxxxxxxxxadministrator:1621276899432  gdyż błąd, który miał 23 bytes musi mieć 16 albo 32, więc dodajemy 9x aby miał 32, klikamy send i w response kopijemy kod z notification i wysyłamy ten kod do dekodera
9. Wybieramy decode as url , decode as base 64, w wersji podstawowej musimy usuwać ręcznie każdego byta, usuwamy od lewej stromy 32 bytes, po usunięciu wybieramy encoded as base64 a potem encoded as url, kopiujemy url wchodzimy do repetera wybieramy decrypt i podmieniamy kod z notification na ten co właśnie skopiowaliśmy i klikamy send
10. Otrzymaliśmy 200 ok, w response wchodzimy na doł i mamy administrator z timestampem, kopiujemy znowu z decrypta kod url z notification, wchodzimy na strone, włączamy intercepta i klikamy home, w przechwyconym połączeniu usuwamy całą sesje z kodem i podmieniamy kod z stay logged in na ten co właśnie skopiowaliśmy klikamy forward
11. Klikamy w admin panel, usuwamy znowu sesje i zmieniamy ponownie kod z stay logged in na nasz skopiowany url i klikamy forward 
12. klikamy na stronie delete carlos i w requescie robimy to samo co wcześniej i klikamy forward 


ENG:


1.Log in with the "Stay logged in" option enabled and post a comment. Study the corresponding requests and responses using Burp's manual testing tools. Observe that the stay-logged-in cookie is encrypted.
2.Notice that when you try and submit a comment using an invalid email address, the response sets an encrypted notification cookie before redirecting you to the blog post.
3.Notice that the error message reflects your input from the email parameter in cleartext:

Invalid email address: your-invalid-email
Deduce that this must be decrypted from the notification cookie. Send the POST /post/comment and the subsequent GET /post?postId=x request (containing the notification cookie) to Burp Repeater.

4.In Repeater, observe that you can use the email parameter of the POST request to encrypt arbitrary data and reflect the corresponding ciphertext in the Set-Cookie header. Likewise, you can use the notification cookie in the GET request to decrypt arbitrary ciphertext and reflect the output in the error message. For simplicity, double-click the tab for each request and rename the tabs encrypt and decrypt respectively.
5.In the decrypt request, copy your stay-logged-in cookie and paste it into the notification cookie. Send the request. Instead of the error message, the response now contains the decrypted stay-logged-in cookie, for example:

wiener:1598530205184
This reveals that the cookie should be in the format username:timestamp. Copy the timestamp to your clipboard.

6.Go to the encrypt request and change the email parameter to administrator:your-timestamp. Send the request and then copy the new notification cookie from the response.
7.Decrypt this new cookie and observe that the 23-character "Invalid email address: " prefix is automatically added to any value you pass in using the email parameter. Send the notification cookie to Burp Decoder.
8.In Decoder, URL-decode and Base64-decode the cookie.
9.In Burp Repeater, switch to the message editor's "Hex" tab. Select the first 23 bytes, then right-click and select "Delete selected bytes".
10.Re-encode the data and copy the result into the notification cookie of the decrypt request. When you send the request, observe that an error message indicates that a block-based encryption algorithm is used and that the input length must be a multiple of 16. You need to pad the "Invalid email address: " prefix with enough bytes so that the number of bytes you will remove is a multiple of 16.
11.In Burp Repeater, go back to the encrypt request and add 9 characters to the start of the intended cookie value, for example:

xxxxxxxxxadministrator:your-timestamp
Encrypt this input and use the decrypt request to test that it can be successfully decrypted.

12.Send the new ciphertext to Decoder, then URL and Base64-decode it. This time, delete 32 bytes from the start of the data. Re-encode the data and paste it into the notification parameter in the decrypt request. Check the response to confirm that your input was successfully decrypted and, crucially, no longer contains the "Invalid email address: " prefix. You should only see administrator:your-timestamp.
13.From the proxy history, send the GET / request to Burp Repeater. Delete the session cookie entirely, and replace the stay-logged-in cookie with the ciphertext of your self-made cookie. Send the request. Observe that you are now logged in as the administrator and have access to the admin panel.
14.Using Burp Repeater, browse to /admin and notice the option for deleting users. Browse to /admin/delete?username=carlos to solve the lab.




