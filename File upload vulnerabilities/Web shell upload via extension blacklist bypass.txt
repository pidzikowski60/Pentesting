This lab contains a vulnerable image upload function. Certain file extensions are blacklisted, but this defense can be bypassed due to a fundamental flaw in the configuration of this blacklist.

To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner.

You can log in to your own account using the following credentials: wiener:peter

1. Włączamy zadanie i uruchamiamy burpa, w chodzimy w my account i logujemy się danymi podanymi w zadaniu, w profili klikamy choose file i wrzucamy jakieś zdjęcie z końcówką png
2. Wchodzimy w http history i szukamy Post URL:/my-account/avatar i wysyłamy do repetera. W repeterze usuwamy plik png z repetera, a następnie zmieniamy nazwe pliku na np shell.php i dodajemy linijkę  <?php echo file_get_contents('/home/carlos/secrets'); klikamy send i otrzymujemy 403 z powiadomieniem, że pliki png nie są dozwolone (ale z powiadomienia wiemy, że zwrotka przyszła z Apache/2.4.41 (Ubuntu))
3. Zmieniamy w repeterze filename z shell.php na .htaccess , następnie zmieniamy content-Type na text/plain i zamiast tej linjiki <?php echo file_get_contents('/home/carlos/secrets'); dodajemy AddType application/x-httpd-php .shell  klikamy send i otrzymujemy 200 ok z powiadomieniem, że plik został wrzucony
4. Wracamy do wcześniejszego ustawienia z repetera jak w kroku 2 tylko zmieniamy filename na shell.shell   klikamy send i otrzy,ujemy 200 ok, plik został pomyślnie wrzucony
5. Wracamy na strone z loginem, odżwieżamy ją, widzimy, że obrazek nie może się załadować. Wchodzimy w http history i szukamy GET URL:/files/avatars/shell.shell w responsie dostaniemy klucz do rozwiązania zadania


ENG:

1.Log in and upload an image as your avatar, then go back to your account page.
2.In Burp, go to Proxy > HTTP history and notice that your image was fetched using a GET request to /files/avatars/<YOUR-IMAGE>. Send this request to Burp Repeater.
3.On your system, create a file called exploit.php containing a script for fetching the contents of Carlos's secret. For example:

<?php echo file_get_contents('/home/carlos/secret'); ?>
4.Attempt to upload this script as your avatar. The response indicates that you are not allowed to upload files with a .php extension.
5.In Burp's proxy history, find the POST /my-account/avatar request that was used to submit the file upload. In the response, notice that the headers reveal that you're talking to an Apache server. Send this request to Burp Repeater.
6.In Burp Repeater, go to the tab for the POST /my-account/avatar request and find the part of the body that relates to your PHP file. Make the following changes:
Change the value of the filename parameter to .htaccess.
Change the value of the Content-Type header to text/plain.
Replace the contents of the file (your PHP payload) with the following Apache directive:

AddType application/x-httpd-php .l33t
This maps an arbitrary extension (.l33t) to the executable MIME type application/x-httpd-php. As the server uses the mod_php module, it knows how to handle this already.

7.Send the request and observe that the file was successfully uploaded.
8.Use the back arrow in Burp Repeater to return to the original request for uploading your PHP exploit.
9.Change the value of the filename parameter from exploit.php to exploit.l33t. Send the request again and notice that the file was uploaded successfully.
10.Switch to the other Repeater tab containing the GET /files/avatars/<YOUR-IMAGE> request. In the path, replace the name of your image file with exploit.l33t and send the request. Observe that Carlos's secret was returned in the response. Thanks to our malicious .htaccess file, the .l33t file was executed as if it were a .php file.
11.Submit the secret to solve the lab.